%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 387.000000 491.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 387 491
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 387 491
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /i put
dup 35 /x put
dup 36 /e put
dup 37 /r put
dup 38 /T put
dup 39 /h put
dup 40 /a put
dup 41 /d put
dup 42 /s put
dup 43 /E put
dup 44 /v put
dup 45 /o put
dup 46 /l put
dup 47 /u put
dup 48 /t put
dup 49 /n put
dup 50 /one put
dup 51 /two put
dup 52 /P put
dup 53 /p put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





3830015EFEAC2A45321B2D30520000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB00010009000001FD0205000B002700B800072FB8000A2FB800012FB800042FBA000300010007111239BA0009000100071112393031130333371733033723072723CBC26790906DC8B266817C6D0110FEF0D6D60117EEB5B500020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000062A4FC55F0F3CF5011103E800000000B643600000000000D7C23C38FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000001701F40033022C0057022C00180263004E036700500288004E023E0002021900240251002402190024022C004000DE004500DE0045022C0040023E002402510043014D003D01F4001F013B0009022C004001F4000E0206000904BE003700000048006E00F60128017201DA0200030A03A804100462048C04A604EE058E0626065406F8074A079A07BA07E6081C0001000000170096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/E 3 def
/M 4 def
/P 5 def
/T 6 def
/a 7 def
/d 8 def
/e 9 def
/h 10 def
/i 11 def
/l 12 def
/n 13 def
/o 14 def
/p 15 def
/r 16 def
/s 17 def
/t 18 def
/u 19 def
/v 20 def
/x 21 def
/uni2B91 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92615E2133941906A02CAE799EFE07355B68024211C14942A28E4AFD6CA90DB6CC37EBFFD27C5109C5DB1728FDDE5D5B0EAF50C7752C47B454F8DE7AA420C3207CB8FDB7DF2DA1D08ED655F709DC0B0B89C1A33D7DB1F4C6F45B3512159864095FE82B7C7445878E6DFF939B3730418C679757F45C6D3B663030C6393C2A3053271A192E98031C713A9D706CD471C968E7A4CF23CCFC81D34A902CD2092225C78B28910ADBF282140C21163D18EDB9A5D6C00C15DF5B79397A6205D7069EBFB2DE0EE3987BC72302413040933036BEC0EED553CA68438855113000A841A88CF887A5421609E7E526A94436634AFDA3FEDBCBD5EF290CFACE46586E1E83F4A714C4C6EF19E6E7C4A8578D4C1FC34A407C5E6E3668A6BDCDB62D1E167B463B061E9EA912AF4B7C2DBC4BC6910AF323AD6EB45B2F7232196A361596C4D8E8BCCCA669C93D50A7FAA758D6E38BAFB8756AA704107586159A8FD2CA34D491AABC15483ECB194C076FE1F014808DFB94287458DD7C3343B03DA362F027C53DBB7F1F59F3916E6101FA17CDCC6F4756FF0EC8DDC10A88A36A9DAC1A2490899479665E759732B0C21AFC2D3D1D8BC3CA6E2455D78462CC345C16F630E4D7AFB19EF9BA49C7E67ACDCC23B20933104A187E974B656ACD71DAF298E096996EFBB8834E66C6DDAA37FB2D6BD85B522DA20893211802DE6B65C3478B759EC202F854F5183884AD12127AB6D75B639CD2B526EA2D343A15A522CA7E8DDC4ECF221B90679BAD3FF6
11A3F50AAA23EC69DF312318860DFFECEE000BA9951188443F869A34BCFE2F0099613AF921065E4731F1A5D0197043D935E2DB3A48E2AA3C88048DF46AE9B28B1FFBA48300815A0D89383BC1AFB0C76403FC2DDAACF9F478C3E29EB5867B51438AB8A6208BD8F972F134617E728B7425504983E9B19F7040C35DD3670FD84B923909127749C688ABBF966691F07BD80BA8D95C9F65A5D772BDA775268A61B06606D4D546C353971D53937568B8C683A490E730D1580519BCD2F183CAA4A4057D8AC3F9F0578B9C1021A5C820E7A5C43426DF3EA94C8C7F81AD97741D4BAF758B663721802ACB2EA157E3C68DC09839F5C760EC8CEBBFF645841F88E018C95DF8A83CFDB5D56B245180C200B7CA3ABCAE6529E938B5C22D123EAACA378D08713E2AC089A8E564B9262F7CF42047B5E6C1BEE773272FA629D339890F76982622E96F1BB0EC65DFA58CE90CE9EDDC974EEBA94CCF5EAD0687EF34A1EDD73E5906952F1F348E8F79D6067B5A42FDE614607B3572291E9CAF8C23880A1CE06993B76DF3004BC3ACC71FF664ECCED673E977F641F0E5D50DC2293EC276DB2E521B6C2D137AAC8943DA6184C576380A0C6929ACD5F9BBD2A88E3ABCA8C696D8DB97EB9FD4718291AE9A28261EA52C6920FDA74EF31D0AC15357B8B426F270D27EED16237CC9A2C9D2B3D240866C00D06946421267266CE31232DA7292F20C522B22BD68C0171A05C694D946BAD761B0F42CDEEAEFEDD24203852F9C002AA567BA85B72BBAA6D1F3172FC63C7EB3C13077D2217D6C485D16D130C8067CB630320540C9DC6348026ABE47B1603EB986749A727AC9957C17D8506395E03942A16E8951421B731448DBB363659D278CE599C587A043EBEA9935BD7A6ADAE67ED229E205C4451C010887EAF3D8D719E9EF042B46E811098F35F4872DBF9CDE560987E0389448248A7372C0EF3EF45080893B6C7E07A42E8D9405B6889DEFB0A05F9DB2A6157B2B5B3080A9AFF5886D456FAFBD8F5C9019581D77DCFF8BB4652D0CEF07AEAC3160AEBD97157AAF5DF5DA90E7A2DCA221414F9342E1A6E85970CF29423B8364607C04C614171F7D54508E56DA57D4E9F80A3E93188C1AA636876F2FD1311797C3BB78066CAF4D0BD4DE92E0702F4B129E9A1A676B6DFC40156B829D71488D8D73EA2943AA566D1793589168F04244350295E6F04480C6EDC47A0504CB49C644499E04AED00C029AF022B13BA7D10E025362F3B632483908A9C09DDA3F9D3A50C0631C9D0EF7B2ED099FB1F580EE395657127E46FC2B189582F1AD4E3A1D9344093E20EDAAC8AB4AE31FC7ACD6D5D9427182D12E56ACD4D622486E2EF30D16EE89B1E0E529A06B1C77361AED6DAA56C464B696AC316942174B27A9FAA1DB38B1BD2C8DF707AD06B6CFDB88C7613E5CBD4F5F0381F828CE23968768A430B42B4E07

1470F9CF0FE95100B0A4760EDE9EB06C99C117DC0AC1E23FEDCA28CAE213336646ADE9C43BC9E613E88071EEC1E44C8056624DB9BB0A4DBB4F3BE78EA6F19320ED48A8AA4A78097A4746B50ACCD57677E57BAA150AFE9B984D3D5EE1824D6CEB5E9A8E6C6C1D1BA51F85269CD9BF19FF3C07E1A70DF47DB53B165B3E913B0A927811D13141FD85E66FD911A2AF6D04A8ADF51E1E2FA9A661BB9D033B6C72A8C48250F7F8B4BE757AF82EFAAC7E7DA6F08FF88AA7E9BC09A2F0DDFDFA1BBDAFDA37ABB8B7E62305BD633AE28D2FC187DDF002AA5922764528C62D8BD8A8F0DBC20BBE8FAC8A2DDD3C36203E0BADB1EC6386EAFA34BABAF7A7B2F7CF6A02A9B3DB06FF80F89FE5612DFD171D3A4E83A86D9ED90CF26785F62C87DAC45458D18FABEC9E4B2AF7FA74906D3E0D74CE491287938B94679986F73297BD6B08FB6C9D4E18685F89A1851ACBB54AB791DB5D1D9BF663277F9998C6E64CA1705BA36AE3808964C43CCCB3103032CC0D9BB0D28AA1607541F60830791BB93A38AE94DACA3864DE0895AFBF3E8F85867F4938C10421912EE564ACFF9A7C666D100E86ED433387A6E36A8526830DD455A65814B9697792FE93382D231E861449649D2374D8EF8E0FB600405C04E0546EB74F0BA32C71FDA0C27405EB2B91D59B1AE68B364C7C6913E562D553FF4D9286073DABFF1817335132D1A14002AF75D70BE497ABE20BF29DCA5A5BB679BB7B2B0A1E27F390B83F35928418E0E8FFC4AF733D557C2DB527BAD44E53EB1E34937C9DB385B803BC3DEE221DA1769641B8BEF5F02D86EF3F65530855208A569E128F2E2D6DE425BB916A5BFF8774DA4C8EB9731E84A5692E9FC1BFF9AD936A17593AA250EE0BB1E07083C739C88910F7770708F93380B2A98176DAD4A01D47C7D1ECAC7EA8308214CD65C603DD89F610B15FA670617745314B311CBB531C27C5FC51D1C08F13CC6E5EE739FBF93FBAC7833F030D11C521BAC52AEED30D8D003AD9F9A6F73062173025357146FE0E6318AFFF119C28DD9AC9DD72AADCDE9976135CFF27BB70E1F4656041177432479B867A487C90C54A785FBC4246DDE2B92863E743D3A27A1B6633FE84C72CEFCA6DC5AEA8CAB9562DA066D91C3AB9A550ED9E6EA2E650420148E39AFFDC63E40936FABBF70A842BFFD63CD492AD61EFA2278E75DC1907B0303638EACF363CCAFBC2BCC8039750AD6B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 387 491 rc
0 491 m
387 491 l
387 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1119 1516 m
2238 1516 l
2238 -1559 l
-1119 -1559 l
h
-1119 1516 m
f
363 442 m
356 442 l
356 1 l
363 1 l
h
363 442 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
582 273 m
575 273 l
575 714 l
582 714 l
h
582 273 m
S
0 i
1 1 1 sc
CM
45 442 m
52 442 l
52 1 l
45 1 l
h
45 442 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
264 273 m
271 273 l
271 714 l
264 714 l
h
264 273 m
S
0 i
1 1 1 sc
CM
153 372 m
255 372 l
259.97055 372 264 367.97055 264 363 c
264 261 l
264 256.02945 259.97055 252 255 252 c
153 252 l
148.02943 252 144 256.02945 144 261 c
144 363 l
144 367.97055 148.02943 372 153 372 c
h
153 372 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
372 343 m
474 343 l
478.97055 343 483 347.02945 483 352 c
483 454 l
483 458.97055 478.97055 463 474 463 c
372 463 l
367.02945 463 363 458.97055 363 454 c
363 352 l
363 347.02945 367.02945 343 372 343 c
h
372 343 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 204 312 cm
/F1.1[ 16 0 0 -16 0 0]sf
-19.848 -3.447998 m
(!"#$%)[ 13.936000 3.552000 8.288000 8.592000 0.000000 ] xS
-28.896 15 m
(&'%$\(\)*)[ 9.184000 8.896000 5.040000 8.592000 8.592000 9.488000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
153 202 m
255 202 l
259.97055 202 264 197.97057 264 193 c
264 91 l
264 86.029434 259.97055 82 255 82 c
153 82 l
148.02943 82 144 86.029434 144 91 c
144 193 l
144 197.97057 148.02943 202 153 202 c
h
153 202 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
372 513 m
474 513 l
478.97055 513 483 517.02942 483 522 c
483 624 l
483 628.97058 478.97055 633 474 633 c
372 633 l
367.02945 633 363 628.97058 363 624 c
363 522 l
363 517.02942 367.02945 513 372 513 c
h
372 513 m
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 204 142 cm
-40 -3.447998 m
(+,-./0"-1$%)[ 9.776000 8.000000 9.184000 3.552000 8.896000 5.040000 3.552000 9.184000 8.896000 8.592000 0.000000 ] xS
-28.896 15 m
(&'%$\(\)*)[ 9.184000 8.896000 5.040000 8.592000 8.592000 9.488000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
371.87436 380.87436 m
378.70856 374.04019 378.70856 362.95981 371.87436 356.12564 c
365.04019 349.29144 353.95981 349.29144 347.12564 356.12564 c
340.29144 362.95981 340.29144 374.04019 347.12564 380.87436 c
353.95981 387.70856 365.04019 387.70856 371.87436 380.87436 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
590.87433 334.12564 m
597.70856 340.95981 597.70856 352.04019 590.87433 358.87436 c
584.04016 365.70856 572.95984 365.70856 566.12567 358.87436 c
559.29144 352.04019 559.29144 340.95981 566.12567 334.12564 c
572.95984 327.29144 584.04016 327.29144 590.87433 334.12564 c
S
482 410 m
555.60809 361.56357 l
S
0 J
0 j
0 i
562.29102 357.16602 m
555.60809 361.56357 l
553.95905 359.0575 m
562.29102 357.16602 l
557.2572 364.06967 l
S
1 1 1 sc
CM
303.63171 357.63171 m
308.12277 353.14069 308.12277 345.85931 303.63171 341.36829 c
299.14069 336.87723 291.85931 336.87723 287.36829 341.36829 c
282.87723 345.85931 282.87723 353.14069 287.36829 357.63171 c
291.85931 362.12277 299.14069 362.12277 303.63171 357.63171 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
522.63171 357.36829 m
527.12274 361.85931 527.12274 369.14069 522.63171 373.63171 c
518.14069 378.12277 510.85931 378.12277 506.36829 373.63171 c
501.87723 369.14069 501.87723 361.85931 506.36829 357.36829 c
510.85931 352.87723 518.14069 352.87723 522.63171 357.36829 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 295.5 349.5 cm
-4.1999998 5.776001 m
(2)s
/Cs2 SC
1 1 1 sc
CM
111.13172 382.63171 m
115.62276 378.14069 115.62276 370.85931 111.13172 366.36829 c
106.64069 361.87723 99.359306 361.87723 94.868279 366.36829 c
90.377235 370.85931 90.377235 378.14069 94.868279 382.63171 c
99.359306 387.12277 106.64069 387.12277 111.13172 382.63171 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
330.13171 332.36829 m
334.62277 336.85931 334.62277 344.14069 330.13171 348.63171 c
325.64069 353.12277 318.35931 353.12277 313.86829 348.63171 c
309.37723 344.14069 309.37723 336.85931 313.86829 332.36829 c
318.35931 327.87723 325.64069 327.87723 330.13171 332.36829 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 103 374.5 cm
-4.1999998 5.776001 m
(3)s
/Cs2 SC
1 1 1 sc
CM
56.874355 394.87436 m
63.708561 388.04019 63.708561 376.95981 56.874355 370.12564 c
50.040184 363.29144 38.959816 363.29144 32.125645 370.12564 c
25.291439 376.95981 25.291439 388.04019 32.125645 394.87436 c
38.959816 401.70856 50.040184 401.70856 56.874355 394.87436 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
275.87436 320.12564 m
282.70856 326.95981 282.70856 338.04019 275.87436 344.87436 c
269.04019 351.70856 257.95981 351.70856 251.12564 344.87436 c
244.29144 338.04019 244.29144 326.95981 251.12564 320.12564 c
257.95981 313.29144 269.04019 313.29144 275.87436 320.12564 c
S
363 376.47961 m
288.56537 343.57904 l
S
0 J
0 j
0 i
281.24826 340.34485 m
288.56537 343.57904 l
287.35254 346.32297 m
281.24826 340.34485 l
289.7782 340.83514 l
S
1 1 1 sc
CM
60.874355 103.87435 m
67.708557 97.040184 67.708557 85.959816 60.874355 79.125648 c
54.040184 72.291443 42.959816 72.291443 36.125645 79.125648 c
29.291439 85.959816 29.291439 97.040184 36.125645 103.87435 c
42.959816 110.70856 54.040184 110.70856 60.874355 103.87435 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
279.87436 611.12567 m
286.70856 617.95984 286.70856 629.04016 279.87436 635.87433 c
273.04019 642.70856 261.95981 642.70856 255.12564 635.87433 c
248.29144 629.04016 248.29144 617.95984 255.12564 611.12567 c
261.95981 604.29144 273.04019 604.29144 279.87436 611.12567 c
S
0 i
1 1 1 sc
CM
60.874355 154.37436 m
67.708557 147.54019 67.708557 136.45981 60.874355 129.62564 c
54.040184 122.79144 42.959816 122.79144 36.125645 129.62564 c
29.291439 136.45981 29.291439 147.54019 36.125645 154.37436 c
42.959816 161.20856 54.040184 161.20856 60.874355 154.37436 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
279.87436 560.62567 m
286.70856 567.45984 286.70856 578.54016 279.87436 585.37433 c
273.04019 592.20856 261.95981 592.20856 255.12564 585.37433 c
248.29144 578.54016 248.29144 567.45984 255.12564 560.62567 c
261.95981 553.79144 273.04019 553.79144 279.87436 560.62567 c
S
284.14783 618.09344 m
353.58411 595.54346 l
S
0 J
0 j
0 i
361.1929 593.07239 m
353.58411 595.54346 l
352.65747 592.69012 m
361.1929 593.07239 l
354.51074 598.39673 l
S
1 J
1 j
0.60000002 i
285 573 m
353.10001 573 l
S
0 J
0 j
0 i
361.10001 573 m
353.10001 573 l
353.10001 570 m
361.10001 573 l
353.10001 576 l
S
1 1 1 sc
CM
335.25 184 m
383.75 184 l
383.75 88.5 l
335.25 88.5 l
h
335.25 184 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
554.25 531 m
602.75 531 l
602.75 626.5 l
554.25 626.5 l
h
554.25 531 m
S
0 i
1 1 1 sc
CM
371.87436 170.37436 m
378.70856 163.54019 378.70856 152.45981 371.87436 145.62564 c
365.04019 138.79144 353.95981 138.79144 347.12564 145.62564 c
340.29144 152.45981 340.29144 163.54019 347.12564 170.37436 c
353.95981 177.20856 365.04019 177.20856 371.87436 170.37436 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
590.87433 544.62567 m
597.70856 551.45984 597.70856 562.54016 590.87433 569.37433 c
584.04016 576.20856 572.95984 576.20856 566.12567 569.37433 c
559.29144 562.54016 559.29144 551.45984 566.12567 544.62567 c
572.95984 537.79144 584.04016 537.79144 590.87433 544.62567 c
S
0 i
1 1 1 sc
CM
371.87436 127.87435 m
378.70856 121.04018 378.70856 109.95982 371.87436 103.12565 c
365.04019 96.291443 353.95981 96.291443 347.12564 103.12565 c
340.29144 109.95982 340.29144 121.04018 347.12564 127.87435 c
353.95981 134.70856 365.04019 134.70856 371.87436 127.87435 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -219 715 cm
590.87433 587.12567 m
597.70856 593.95984 597.70856 605.04016 590.87433 611.87433 c
584.04016 618.70856 572.95984 618.70856 566.12567 611.87433 c
559.29144 605.04016 559.29144 593.95984 566.12567 587.12567 c
572.95984 580.29144 584.04016 580.29144 590.87433 587.12567 c
S
483 583.2251 m
551.48804 594.89667 l
S
0 J
0 j
0 i
559.37433 596.24066 m
551.48804 594.89667 l
551.992 591.93933 m
559.37433 596.24066 l
550.98401 597.85406 l
S
1 J
1 j
0.60000002 i
483 566.82635 m
551.24335 559.80457 l
S
0 J
0 j
0 i
559.20135 558.98572 m
551.24335 559.80457 l
550.93628 556.82031 m
559.20135 558.98572 l
551.55042 562.78876 l
S
1 J
1 j
0.60000002 i
554.25 551.34204 m
482.46771 470.21191 l
S
0 J
0 j
0 i
477.16656 464.22043 m
482.46771 470.21191 l
480.22092 472.19983 m
477.16656 464.22043 l
484.71454 468.22397 l
S
1 0 0 -1 48.5 469 cm
/F1.1[ 18 0 0 -18 0 0]sf
-43.5 12.248001 m
(4-5/.\(0"-1)[ 11.714000 10.382000 10.724000 10.058000 4.046000 9.716000 5.720000 4.046000 10.382000 0.000000 ] xS
1 0 0 -1 359.5 469 cm
-22.5 12.248001 m
(!"#$%)[ 15.728000 4.046000 9.374000 9.716000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
